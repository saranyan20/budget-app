{"version":3,"sources":["webpack:///./src/views/Dashboard/Dashboard.vue?fc8e","webpack:///./src/views/Dashboard/queries.js","webpack:///src/views/Dashboard/Dashboard.vue","webpack:///./src/views/Dashboard/Dashboard.vue?31dd","webpack:///./src/views/Dashboard/Dashboard.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","_v","attrs","selectedYear","yearOptions","on","$event","staticClass","staticStyle","key","expenseAmountByMonth","maintainAspectRatio","selectedMonth","monthOptions","expenseAmountByCategory","expenseCategory","staticRenderFns","GET_CATEGORIES","gql","GET_BUDGET_DETAILS","component"],"mappings":"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","file":"js/chunk-2d2248a4.caa95efa.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('CCard',[_c('CCardHeader',[_c('h5',[_vm._v(\"Budget Dashboard\")])]),_c('CCardBody',[_c('CRow',[_c('CCol',{attrs:{\"sm\":\"6\"}},[_c('CSelect',{attrs:{\"value\":_vm.selectedYear,\"options\":_vm.yearOptions},on:{\"update:value\":function($event){_vm.selectedYear=$event}}})],1)],1),_c('br'),_c('CCardGroup',{staticClass:\"card-columns\",attrs:{\"deck\":\"\"}},[_c('CCard',{staticClass:\"custom-card\",staticStyle:{\"margin-right\":\"0\"}},[_c('CCardHeader',[_vm._v(\"Amount of expense by month\")]),_c('CCardBody',[_c('CChartBar',{key:1,staticStyle:{\"height\":\"300px\"},attrs:{\"datasets\":_vm.expenseAmountByMonth,\"labels\":\"months\",\"options\":{ maintainAspectRatio: false }}})],1)],1),_c('CCard',{staticClass:\"custom-card\",staticStyle:{\"margin-right\":\"0\"}},[_c('CCardHeader',[_vm._v(\"Amount of expense by category\")]),_c('CCardBody',[_c('CSelect',{attrs:{\"value\":_vm.selectedMonth,\"options\":_vm.monthOptions},on:{\"update:value\":function($event){_vm.selectedMonth=$event}}}),_c('br'),_c('CChartPie',{key:1,staticStyle:{\"height\":\"300px\"},attrs:{\"datasets\":_vm.expenseAmountByCategory,\"labels\":_vm.expenseCategory,\"options\":{ maintainAspectRatio: false }}})],1)],1)],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import gql from 'graphql-tag';\r\n\r\nconst GET_CATEGORIES = gql`\r\n    query MyQuery {\r\n        budget_app_income_category(order_by: { sequence: asc }) {\r\n            category_name\r\n            sequence\r\n            id\r\n        }\r\n        budget_app_expense_category(order_by: { sequence: asc }) {\r\n            sequence\r\n            id\r\n            category_name\r\n        }\r\n    }\r\n`;\r\n\r\nconst GET_BUDGET_DETAILS = gql`\r\n    query ($login_id: Int!) {\r\n        budget_app_budget_details(\r\n            order_by: { transaction_date: desc }\r\n            where: { login_id: { _eq: $login_id } }\r\n        ) {\r\n            amount\r\n            category\r\n            description\r\n            transaction_date\r\n            type\r\n        }\r\n    }\r\n`;\r\n\r\nexport default {\r\n    GET_CATEGORIES,\r\n    GET_BUDGET_DETAILS\r\n};\r\n","<template>\r\n    <CCard>\r\n        <CCardHeader><h5>Budget Dashboard</h5></CCardHeader>\r\n        <CCardBody>\r\n            <CRow>\r\n                <CCol sm=\"6\">\r\n                    <CSelect\r\n                        :value.sync=\"selectedYear\"\r\n                        :options=\"yearOptions\"\r\n                    />\r\n                </CCol>\r\n            </CRow>\r\n            <br />\r\n            <CCardGroup deck class=\"card-columns\">\r\n                <CCard style=\" margin-right: 0;\" class=\"custom-card\">\r\n                    <CCardHeader>Amount of expense by month</CCardHeader>\r\n                    <CCardBody>\r\n                        <CChartBar\r\n                            style=\"height: 300px\"\r\n                            :key=\"1\"\r\n                            :datasets=\"expenseAmountByMonth\"\r\n                            labels=\"months\"\r\n                            :options=\"{ maintainAspectRatio: false }\"\r\n                        />\r\n                    </CCardBody>\r\n                </CCard>\r\n                <CCard style=\"margin-right: 0;\" class=\"custom-card\">\r\n                    <CCardHeader>Amount of expense by category</CCardHeader>\r\n                    <CCardBody>\r\n                        <CSelect\r\n                            :value.sync=\"selectedMonth\"\r\n                            :options=\"monthOptions\"\r\n                        />\r\n                        <br />\r\n                        <CChartPie\r\n                            style=\"height: 300px\"\r\n                            :key=\"1\"\r\n                            :datasets=\"expenseAmountByCategory\"\r\n                            :labels=\"expenseCategory\"\r\n                            :options=\"{ maintainAspectRatio: false }\"\r\n                        />\r\n                    </CCardBody>\r\n                </CCard>\r\n            </CCardGroup>\r\n        </CCardBody>\r\n    </CCard>\r\n</template>\r\n\r\n<script>\r\nimport queries from './queries';\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            selectedYear: new Date().getFullYear(),\r\n            selectedMonth: new Date().getMonth() + 1,\r\n\r\n            expenseByMonth: [],\r\n            expenseByCategory: [],\r\n            expenseCategory: [],\r\n\r\n            incomeCategoryOptions: [],\r\n            expenseCategoryOptions: [],\r\n\r\n            incomeList: [],\r\n            expenseList: []\r\n        };\r\n    },\r\n    computed: {\r\n        yearOptions() {\r\n            return [\r\n                { label: '2020', value: 2020 },\r\n                { label: '2021', value: 2021 },\r\n                { label: '2022', value: 2022 },\r\n                { label: '2023', value: 2023 },\r\n                { label: '2024', value: 2024 },\r\n                { label: '2025', value: 2025 }\r\n            ];\r\n        },\r\n        monthOptions() {\r\n            return [\r\n                { label: 'January', value: 1 },\r\n                { label: 'February', value: 2 },\r\n                { label: 'March', value: 3 },\r\n                { label: 'April', value: 4 },\r\n                { label: 'May', value: 5 },\r\n                { label: 'June', value: 6 },\r\n                { label: 'July', value: 7 },\r\n                { label: 'August', value: 8 },\r\n                { label: 'September', value: 9 },\r\n                { label: 'October', value: 10 },\r\n                { label: 'November', value: 11 },\r\n                { label: 'December', value: 12 }\r\n            ];\r\n        },\r\n        expenseAmountByMonth() {\r\n            return [\r\n                {\r\n                    data: this.expenseByMonth,\r\n                    backgroundColor: '#E55353',\r\n                    label: 'Amount'\r\n                }\r\n            ];\r\n        },\r\n        expenseAmountByCategory() {\r\n            return [\r\n                {\r\n                    data: this.expenseByCategory,\r\n                    backgroundColor: [\r\n                        '#E55353',\r\n                        '#41B883',\r\n                        '#E46651',\r\n                        '#00D8FF',\r\n                        '#DD1B16'\r\n                    ],\r\n                    label: 'No of jobs'\r\n                }\r\n            ];\r\n        }\r\n    },\r\n    watch: {\r\n        selectedYear() {\r\n            this.getExpenseByMonth();\r\n            this.getExpenseByCategory();\r\n        },\r\n        selectedMonth() {\r\n            this.getExpenseByMonth();\r\n            this.getExpenseByCategory();\r\n        }\r\n    },\r\n    methods: {\r\n        getBudgetDetails() {\r\n            this.$apollo\r\n                .mutate({\r\n                    mutation: queries.GET_BUDGET_DETAILS,\r\n                    variables: { login_id: localStorage.getItem('login_id') }\r\n                })\r\n                .then(res => {\r\n                    let incomeList = [],\r\n                        expenseList = [];\r\n                    const result = res?.data?.budget_app_budget_details;\r\n                    if (result.length > 0) {\r\n                        for (const el of result) {\r\n                            if (el.type == 'Income') incomeList.push(el);\r\n                            else if (el.type == 'Expense') expenseList.push(el);\r\n                        }\r\n                        this.incomeList = incomeList;\r\n                        this.expenseList = expenseList;\r\n\r\n                        this.getExpenseByMonth();\r\n                        this.getExpenseByCategory();\r\n                    }\r\n                })\r\n                .catch(err => console.log(err));\r\n        },\r\n\r\n        getExpenseByMonth() {\r\n            const expenseByMonth = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n            for (const el of this.expenseList) {\r\n                const month = new Date(el.transaction_date).getMonth() + 1;\r\n                const year = new Date(el.transaction_date).getFullYear();\r\n                if (year == this.selectedYear) {\r\n                    expenseByMonth[month - 1] += el.amount;\r\n                }\r\n            }\r\n            this.expenseByMonth = expenseByMonth;\r\n        },\r\n\r\n        getExpenseByCategory() {\r\n            const expenseByCategory = [],\r\n                expenseCategory = [];\r\n            for (const el of this.expenseList) {\r\n                const month = new Date(el.transaction_date).getMonth() + 1;\r\n                const year = new Date(el.transaction_date).getFullYear();\r\n                if (year == this.selectedYear && month == this.selectedMonth) {\r\n                    for (const eachCategory of this.expenseCategoryOptions) {\r\n                        if (el.category == eachCategory) {\r\n                            expenseByCategory.push(el.amount);\r\n                            expenseCategory.push(el.category);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.expenseByCategory = expenseByCategory;\r\n            this.expenseCategory = expenseCategory;\r\n        }\r\n    },\r\n    apollo: {\r\n        categoryData: {\r\n            query: queries.GET_CATEGORIES,\r\n            update: data => data,\r\n            result({ data }) {\r\n                this.update = false;\r\n                let incomeCategoryOptions = [],\r\n                    expenseCategoryOptions = [];\r\n                for (const el of data?.budget_app_income_category) {\r\n                    incomeCategoryOptions.push(el.category_name);\r\n                }\r\n                for (const el of data?.budget_app_expense_category) {\r\n                    expenseCategoryOptions.push(el.category_name);\r\n                }\r\n                this.incomeCategoryOptions = incomeCategoryOptions;\r\n                this.expenseCategoryOptions = expenseCategoryOptions;\r\n\r\n                this.getBudgetDetails();\r\n            }\r\n        }\r\n    }\r\n};\r\n</script>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Dashboard.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Dashboard.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Dashboard.vue?vue&type=template&id=11554e11&\"\nimport script from \"./Dashboard.vue?vue&type=script&lang=js&\"\nexport * from \"./Dashboard.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}